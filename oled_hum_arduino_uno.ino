#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "dht.h"
#define dht_apin A0
#define OLED_MOSI   9 //D1
#define OLED_CLK   10 //D0
#define OLED_DC    11 //DC
#define OLED_CS    12 //CS 
#define OLED_RESET 13 //RST

Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);
// 'IPCS_Logo_QL4I8Cb - Copy (3)', 128x32px
const unsigned char myBitmap [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x83, 0x8f, 0x0e, 0x00, 0x78, 0x03, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x0f, 0xe7, 0x0e, 0x00, 0x30, 0x01, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x18, 0x17, 0x0c, 0x00, 0x30, 0x01, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x20, 0x0f, 0x0c, 0x00, 0x30, 0x01, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x23, 0xe7, 0x0f, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x44, 0x1f, 0x0e, 0x00, 0x30, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x08, 0xe7, 0x0e, 0x00, 0x30, 0xff, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x13, 0x17, 0x0e, 0x00, 0x30, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x12, 0x0f, 0x0e, 0x00, 0x70, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x14, 0x0f, 0x0e, 0x0f, 0xf0, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xd4, 0x0f, 0x0e, 0x0f, 0xf0, 0x03, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf4, 0x0f, 0x0e, 0x0f, 0xf0, 0x01, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0x0e, 0x0f, 0xf8, 0x01, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x1e, 0x1f, 0xfc, 0x03, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xe7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x9f, 0xef, 0xf8, 0x7e, 0x1f, 0xf7, 0x3f, 0x81, 0xf3, 0xe7, 0xf1, 0xfd, 0x1f, 0xff, 
  0xff, 0xfe, 0x23, 0xe6, 0xfc, 0xfc, 0xcf, 0xc1, 0xbf, 0x31, 0xf3, 0xe7, 0xe4, 0xfc, 0xcf, 0xff, 
  0xff, 0xfe, 0x73, 0xe6, 0xfc, 0xfd, 0xe7, 0xd9, 0x9f, 0x79, 0xfb, 0xe7, 0xde, 0x7d, 0xcf, 0xff, 
  0xff, 0xfe, 0xf3, 0xe6, 0xfc, 0xfd, 0xe7, 0xdb, 0x9f, 0x79, 0xfb, 0xe7, 0xde, 0x7d, 0xcf, 0xff, 
  0xff, 0xfe, 0x73, 0xe6, 0xfe, 0xfc, 0xcf, 0xdb, 0x9f, 0x39, 0xfb, 0xe7, 0xce, 0xfd, 0xcf, 0xff, 
  0xff, 0xff, 0x03, 0xe1, 0xfe, 0x7e, 0x1f, 0xdb, 0x9f, 0x81, 0xf8, 0xe7, 0xe1, 0xfd, 0xcf, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

#define SSD1306_LCDHEIGHT 64
#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif*/
dht DHT;

void setup()
{
  Serial.begin(9600);
  display.begin(SSD1306_SWITCHCAPVCC);
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setTextSize(1.5);
}
void loop()
{
  display.clearDisplay();
  display.drawBitmap(0, 0,  myBitmap, 128, 32, BLACK, WHITE);
  display.display();
  delay(2000);
  /*display.clearDisplay();
  display.setTextSize(1.7);
  display.setCursor(20,0);
  display.print("Welcome to our ");
  display.setCursor(30,10);
  display.print("course on");
  display.setCursor(10,20);
  display.print("Embedded Systems");
  display.display();
  delay(3000);*/
  DHT.read11(dht_apin);  // Read apin on DHT11
  display.clearDisplay();
  display.setTextSize(1.7);
  display.setCursor(2,5);
  display.print("Temperature : ");
  display.setCursor(85, 5);  // set position
  display.print(DHT.temperature, 0);  // display temperature from DHT11
  display.setCursor(97,3);
  display.print((char)248);
  display.setCursor(104,5);
  display.print("C");
  display.setCursor(2,20);
  display.print("Humidity    : ");
  display.setCursor(85, 20);
  display.print(DHT.humidity, 0);  // display humidity from DHT11
  display.setCursor(100,20);
  display.print("%");
  display.display();
  delay(5000); 
  // Delay of 5sec before accessing DHT11 (min - 2sec)
}
